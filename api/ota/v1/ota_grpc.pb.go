// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: ota/v1/ota.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OtaClient is the client API for Ota service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtaClient interface {
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenReply, error)
	GetHotelRoomType(ctx context.Context, in *GetHotelRoomTypeRequest, opts ...grpc.CallOption) (*GetHotelRoomTypeReply, error)
	ListHotelRoomType(ctx context.Context, in *ListHotelRoomTypeRequest, opts ...grpc.CallOption) (*ListHotelRoomTypeReply, error)
}

type otaClient struct {
	cc grpc.ClientConnInterface
}

func NewOtaClient(cc grpc.ClientConnInterface) OtaClient {
	return &otaClient{cc}
}

func (c *otaClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenReply, error) {
	out := new(GetTokenReply)
	err := c.cc.Invoke(ctx, "/ota.v1.Ota/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaClient) GetHotelRoomType(ctx context.Context, in *GetHotelRoomTypeRequest, opts ...grpc.CallOption) (*GetHotelRoomTypeReply, error) {
	out := new(GetHotelRoomTypeReply)
	err := c.cc.Invoke(ctx, "/ota.v1.Ota/GetHotelRoomType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaClient) ListHotelRoomType(ctx context.Context, in *ListHotelRoomTypeRequest, opts ...grpc.CallOption) (*ListHotelRoomTypeReply, error) {
	out := new(ListHotelRoomTypeReply)
	err := c.cc.Invoke(ctx, "/ota.v1.Ota/ListHotelRoomType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtaServer is the server API for Ota service.
// All implementations must embed UnimplementedOtaServer
// for forward compatibility
type OtaServer interface {
	GetToken(context.Context, *GetTokenRequest) (*GetTokenReply, error)
	GetHotelRoomType(context.Context, *GetHotelRoomTypeRequest) (*GetHotelRoomTypeReply, error)
	ListHotelRoomType(context.Context, *ListHotelRoomTypeRequest) (*ListHotelRoomTypeReply, error)
	mustEmbedUnimplementedOtaServer()
}

// UnimplementedOtaServer must be embedded to have forward compatible implementations.
type UnimplementedOtaServer struct {
}

func (UnimplementedOtaServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedOtaServer) GetHotelRoomType(context.Context, *GetHotelRoomTypeRequest) (*GetHotelRoomTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotelRoomType not implemented")
}
func (UnimplementedOtaServer) ListHotelRoomType(context.Context, *ListHotelRoomTypeRequest) (*ListHotelRoomTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHotelRoomType not implemented")
}
func (UnimplementedOtaServer) mustEmbedUnimplementedOtaServer() {}

// UnsafeOtaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtaServer will
// result in compilation errors.
type UnsafeOtaServer interface {
	mustEmbedUnimplementedOtaServer()
}

func RegisterOtaServer(s grpc.ServiceRegistrar, srv OtaServer) {
	s.RegisterService(&Ota_ServiceDesc, srv)
}

func _Ota_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ota.v1.Ota/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ota_GetHotelRoomType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelRoomTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaServer).GetHotelRoomType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ota.v1.Ota/GetHotelRoomType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaServer).GetHotelRoomType(ctx, req.(*GetHotelRoomTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ota_ListHotelRoomType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotelRoomTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaServer).ListHotelRoomType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ota.v1.Ota/ListHotelRoomType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaServer).ListHotelRoomType(ctx, req.(*ListHotelRoomTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ota_ServiceDesc is the grpc.ServiceDesc for Ota service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ota_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ota.v1.Ota",
	HandlerType: (*OtaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Ota_GetToken_Handler,
		},
		{
			MethodName: "GetHotelRoomType",
			Handler:    _Ota_GetHotelRoomType_Handler,
		},
		{
			MethodName: "ListHotelRoomType",
			Handler:    _Ota_ListHotelRoomType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ota/v1/ota.proto",
}
