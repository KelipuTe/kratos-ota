// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOtaGetHotelRoomType = "/ota.v1.Ota/GetHotelRoomType"
const OperationOtaListHotelRoomType = "/ota.v1.Ota/ListHotelRoomType"

type OtaHTTPServer interface {
	GetHotelRoomType(context.Context, *GetHotelRoomTypeRequest) (*GetHotelRoomTypeReply, error)
	ListHotelRoomType(context.Context, *ListHotelRoomTypeRequest) (*ListHotelRoomTypeReply, error)
}

func RegisterOtaHTTPServer(s *http.Server, srv OtaHTTPServer) {
	r := s.Route("/")
	r.GET("/ota/get_hotel_room_type", _Ota_GetHotelRoomType0_HTTP_Handler(srv))
	r.GET("/ota/list_hotel_room_type", _Ota_ListHotelRoomType0_HTTP_Handler(srv))
}

func _Ota_GetHotelRoomType0_HTTP_Handler(srv OtaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHotelRoomTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOtaGetHotelRoomType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHotelRoomType(ctx, req.(*GetHotelRoomTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHotelRoomTypeReply)
		return ctx.Result(200, reply)
	}
}

func _Ota_ListHotelRoomType0_HTTP_Handler(srv OtaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHotelRoomTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOtaListHotelRoomType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHotelRoomType(ctx, req.(*ListHotelRoomTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListHotelRoomTypeReply)
		return ctx.Result(200, reply)
	}
}

type OtaHTTPClient interface {
	GetHotelRoomType(ctx context.Context, req *GetHotelRoomTypeRequest, opts ...http.CallOption) (rsp *GetHotelRoomTypeReply, err error)
	ListHotelRoomType(ctx context.Context, req *ListHotelRoomTypeRequest, opts ...http.CallOption) (rsp *ListHotelRoomTypeReply, err error)
}

type OtaHTTPClientImpl struct {
	cc *http.Client
}

func NewOtaHTTPClient(client *http.Client) OtaHTTPClient {
	return &OtaHTTPClientImpl{client}
}

func (c *OtaHTTPClientImpl) GetHotelRoomType(ctx context.Context, in *GetHotelRoomTypeRequest, opts ...http.CallOption) (*GetHotelRoomTypeReply, error) {
	var out GetHotelRoomTypeReply
	pattern := "/ota/get_hotel_room_type"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOtaGetHotelRoomType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OtaHTTPClientImpl) ListHotelRoomType(ctx context.Context, in *ListHotelRoomTypeRequest, opts ...http.CallOption) (*ListHotelRoomTypeReply, error) {
	var out ListHotelRoomTypeReply
	pattern := "/ota/list_hotel_room_type"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOtaListHotelRoomType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
